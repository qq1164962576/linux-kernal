一:虚拟内存
虚拟内存目的:虚拟内存是由cpu和操作系统一起实现的技术目的是为了解决物理内存不够用.可以让更多,更大的程序执行.
虚拟内存定义:虚拟内存是计算机系统内存管理的一项技术,它将内存和大存储的硬盘结合在一起,并且让进程拥有一个私
有地址空间,把进程分作多个固定大小的地址连续的虚拟存储区域称作页或页面,将物理内存也分成固定大小的地址连续的物理存储区域称作页框,每一个页框可以包含一个
页面,也就是说页面和页框大小一致,这些虚拟页或页面会被映射成一个页框.但是一个进程的虚拟页面不会都在内存中,只有被引用和使用
时通过缺页中断才会加载到进程中,也就是多个虚拟页面会对应一个物理页框,取决于那个虚拟页面在使用.这样可以可以从逻辑上提升内存空间
让更多进程执行.
缺页中断:进程要使用的虚拟页面映射不到物理页框地址或者说不在主存中,发生缺页中断,陷入内核操作系统装载.
分页:就是将虚拟页面映射到物理页框(将虚拟地址转换成物理地址)以及在主存和硬盘中交换进程页面的技术.cpu的MMU中有专门的分页单元和相对应的寄存器.
虚拟页/页面:虚拟内存管理中将进程分成多个固定大小的地址连续的虚拟存储区域,页面中使用的是连续的线性(虚拟)地址,页面并不指向某一个物理内存
区域,映射到哪里就是哪里只要二进制数据正确就行.
物理页框:虚拟内存管理中将RAM分成多个固定大小的地址连续的物理存储区域,页框使用的是连续的物理地址,页面是指向一个唯一的物理主存区域,
一个页框包含一个页面,页框大小通常和页面一样.
页表:操作系统内核中一个数据结构,用来保存进程虚拟页面到物理页框的映射关系,或者说是虚拟地址到物理地址的映射关系.
二:linux2.6内核和I386的虚拟内存分页技术:
线程地址的划分:在i386中,每一个线程地址都有32位可以表示任何4GBRAM的内存地址.我们把线程地址分为3个部分,高10位为页目录偏移量(相对地址)
,中间10位为页表偏移量(相对地址),低12位为映射后的物理地址或者叫做页面的偏移量(相对地址).
页目录:操作系统内核来维护的一个数据结构,每个进程都有一个唯一的页目录,用来存放页表对象,每一项都是一个页表.因为使用
10位来表示所以最多可以有1024项即可以指向1024个页表.
页表:与上述的页表一样,只是在i386与2.6内核中,页面被固定为4KB(低12地址最多表示4096个字节)大小.一个进程有多个页表(对应了页目录的一项).用来保存
页面和页框的映射关系,页表的每一项都是一个页面项.因为可以使用10位所以一个页表最多可以有1024个页面和页框的映射关系.
PS1:之所以使用页目录和页表这样的二级转换是为了减少进程所有页表数据结构占用的内存空间.
PS2:因为页目录可以有1024个页表,并且每个页表可以有1024个页面,每个页面都是4096字节所以1024*1024*4096=4GB这和32位虚拟
地址所寻找的内存空间一样.1024*1024代表有多少个页面在*4096就是所有页面可以寻找的内存空间.
分页单元地址转换:操作系统内核维护页目录与页表数据结构,在启用了CPU虚拟内存分页单元后.使用二级转换.当一个进程开始执行时.
1:把该进程的页目录基地址放到CR3寄存器中.
2:取出当前线性地址的高10位页目录偏移量找到当前页目录中的页表项.
3:使用页表对象的Field字段找到页表基地址,指向对应的页表.使用中间10位页表偏移量找到当前页表中的页面项.
4:使 用页面项找到对应物理页框的基地址并和低12位地址(可以表示4096个字节相加)组成转换为真正的物理地址.